use crate::token::Span;
use std::rc::Rc;

#[derive(Debug)]
pub enum AST {
    And(Span, Rc<AST>, Rc<AST>),
    Assert(Span, Rc<AST>),
    Assignment(Span, Rc<AST>, Rc<AST>),
    Block(Span, Vec<Rc<AST>>),
    BooleanLiteral(Span, bool),
    Call(Span, Rc<AST>, Vec<Rc<AST>>),
    Divide(Span, Rc<AST>, Rc<AST>),
    FloatLiteral(Span, f64),
    Function {
        span: Span,
        name: Option<String>,
        args: Vec<String>,
        body: Rc<AST>,
    },
    If(Span, Rc<AST>, Rc<AST>, Option<Rc<AST>>),
    Index(Span, Rc<AST>, Rc<AST>),
    IntegerLiteral(Span, i64),
    Minus(Span, Rc<AST>, Rc<AST>),
    Multiply(Span, Rc<AST>, Rc<AST>),
    Not(Span, Rc<AST>),
    Nothing(Span),
    Or(Span, Rc<AST>, Rc<AST>),
    Plus(Span, Rc<AST>, Rc<AST>),
    Return(Span, Rc<AST>),
    Slice {
        span: Span,
        lhs: Rc<AST>,
        start: Option<Rc<AST>>,
        end: Option<Rc<AST>>,
        step: Option<Rc<AST>>,
    },
    StringLiteral(Span, String),
    VarDeclaration(Span, String, Rc<AST>),
    Variable(Span, String),
    Equals(Span, Rc<AST>, Rc<AST>),
    NotEquals(Span, Rc<AST>, Rc<AST>),
    LessThan(Span, Rc<AST>, Rc<AST>),
    GreaterThan(Span, Rc<AST>, Rc<AST>),
    LessEquals(Span, Rc<AST>, Rc<AST>),
    GreaterEquals(Span, Rc<AST>, Rc<AST>),
    While(Span, Rc<AST>, Rc<AST>),
    Continue(Span),
    Break(Span),
    For(Span, String, Rc<AST>, Rc<AST>),
    Range(Span, Rc<AST>, Rc<AST>),
}

impl AST {
    pub fn span(&self) -> &Span {
        match self {
            AST::And(span, ..) => span,
            AST::Assert(span, ..) => span,
            AST::Assignment(span, ..) => span,
            AST::Block(span, ..) => span,
            AST::BooleanLiteral(span, ..) => span,
            AST::Call(span, ..) => span,
            AST::Divide(span, ..) => span,
            AST::FloatLiteral(span, ..) => span,
            AST::Function { span, .. } => span,
            AST::If(span, ..) => span,
            AST::Index(span, ..) => span,
            AST::IntegerLiteral(span, ..) => span,
            AST::Minus(span, ..) => span,
            AST::Multiply(span, ..) => span,
            AST::Not(span, ..) => span,
            AST::Nothing(span, ..) => span,
            AST::Or(span, ..) => span,
            AST::Plus(span, ..) => span,
            AST::Return(span, ..) => span,
            AST::Slice { span, .. } => span,
            AST::StringLiteral(span, ..) => span,
            AST::VarDeclaration(span, ..) => span,
            AST::Variable(span, ..) => span,
            AST::Equals(span, ..) => span,
            AST::NotEquals(span, ..) => span,
            AST::LessThan(span, ..) => span,
            AST::GreaterThan(span, ..) => span,
            AST::LessEquals(span, ..) => span,
            AST::GreaterEquals(span, ..) => span,
            AST::While(span, ..) => span,
            AST::Continue(span, ..) => span,
            AST::Break(span, ..) => span,
            AST::For(span, ..) => span,
            AST::Range(span, ..) => span,
        }
    }
}
